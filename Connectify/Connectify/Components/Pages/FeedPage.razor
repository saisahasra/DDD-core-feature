@page "/feed"
@using System.Net.Http.Json
@using System.Text.Json
@using ConnectifyApp.Models
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage

@attribute [Authorize]

<h1>Feed</h1>

@if (loggedInUser == null)
{
    <p>Loading user data or not logged in...</p>
}
else if (otherUsers.Count == 0)
{
    <p>No other users to show.</p>
}
else
{
    @if (currentProfileIndex < otherUsers.Count)
    {
        var currentProfile = otherUsers[currentProfileIndex];

        <div class="card mb-3" style="width: 18rem;">
            <img src="@currentProfile.ProfilePicture" class="card-img-top" alt="@currentProfile.FirstName" style="max-height: 200px; object-fit: cover;">
            <div class="card-body">
                <h5 class="card-title">@currentProfile.FirstName, @currentProfile.Age</h5>
                <p class="card-text">Course: @currentProfile.Course</p>
                <p class="card-text">Hobbies/Interests: @currentProfile.Hobbies</p>
                <p class="card-text">About Me: @currentProfile.AboutMe</p>
                <div class="d-flex justify-content-around mt-3">
                    <button class="btn btn-danger" @onclick="() => SwipeLeft(currentProfile)">Decline</button>
                    <button class="btn btn-success" @onclick="() => SwipeRight(currentProfile)">Match</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>No more profiles to show.</p>
    }
}

@if (showMatchPopup)
{
    <div class="modal d-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Matched!</h5>
                    <button type="button" class="close" @onclick="CloseMatchPopup" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    @if (matchedUser != null)
                    {
                        <img src="@matchedUser.ProfilePicture" class="img-fluid rounded-circle" style="width: 80px; height: 80px; object-fit: cover;" alt="@matchedUser.FirstName" />
                        <p class="mt-2">You matched with <b>@matchedUser.FirstName</b>!</p>
                    }
                </div>
                <div class="modal-footer justify-content-center">
                    <button class="btn btn-primary" @onclick="GoToChat">Chat</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User> allUsers = new List<User>();
    private List<User> otherUsers = new List<User>();
    private User? loggedInUser;
    private int currentProfileIndex = 0;
    private List<User> matches = new List<User>();
    private bool showMatchPopup = false;
    private User? matchedUser;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var baseUri = NavigationManager.BaseUri;
            allUsers = await Http.GetFromJsonAsync<List<User>>($"{baseUri}users.json");
            if (allUsers != null && allUsers.Count > 0)
            {
                // Basic check if logged in
                var authState = await AuthenticationStateTask;
                var user = authState.User;
                if (user.Identity?.IsAuthenticated ?? false)
                {
                    // In a real app, you'd get the logged-in user from a service
                    loggedInUser = await LocalStorage.GetItemAsync<User>("loggedInUser");
                    if (loggedInUser != null)
                    {
                        otherUsers = allUsers.Where(u => u.UserID != loggedInUser.UserID).ToList();
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/login"); // Redirect if not logged in
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("/login"); // Redirect if not authenticated
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data in feed: {ex.Message}");
        }
    }

    private void SwipeLeft(User user)
    {
        currentProfileIndex++;
        StateHasChanged();
    }

    private void SwipeRight(User user)
    {
        if (loggedInUser != null)
        {
            matches.Add(user); // Simulate a match
            Console.WriteLine($"You matched with {user.FirstName}!");

            // Simulate checking for a mutual match (very basic)
            if (otherUsers.Any(u => u.UserID == user.UserID))
            {
                matchedUser = user;
                showMatchPopup = true;
            }

            currentProfileIndex++;
            StateHasChanged();
        }
    }

    private void CloseMatchPopup()
    {
        showMatchPopup = false;
        matchedUser = null;
    }

    private void GoToChat()
    {
        NavigationManager.NavigateTo("/chats"); // You'll create this later
        CloseMatchPopup();
    }
}