@page "/login"
@using System.Net.Http.Json
@using System.Text.Json
@using ConnectifyApp.Models
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<h1>Connectify Login</h1>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="form-group mb-3">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group mb-3">
        <label for="password">Password:</label>
        <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;
    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var baseUri = NavigationManager.BaseUri;
            var usersJsonPath = $"{baseUri}users.json";
            users = await Http.GetFromJsonAsync<List<User>>(usersJsonPath);
            if (users == null)
            {
                errorMessage = "Failed to load user data.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
            Console.WriteLine($"HTTP Request Error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            errorMessage = $"Error parsing user data: {ex.Message}";
            Console.WriteLine($"JSON Parsing Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        try
        {
            if (users != null)
            {
                var user = users.FirstOrDefault(u =>
                    string.Equals(u.Username, loginModel.Username, StringComparison.OrdinalIgnoreCase) &&
                    u.Password == loginModel.Password // In a real app, compare hashed passwords
                );

                if (user != null)
                {
                    // Store the logged-in user
                    await LocalStorage.SetItemAsync("loggedInUser", JsonSerializer.Serialize(user));
                    NavigationManager.NavigateTo("/feed");
                }
                else
                {
                    errorMessage = "Invalid username or password.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred during login: {ex.Message}";
            Console.WriteLine($"Login Error: {ex.Message}");
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}